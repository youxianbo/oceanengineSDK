<?php
/**
 * ReportApi
 * PHP version 5
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 巨量开放接口
 *
 * 根据项目需求完成的接口，非所有接口都有相应的代码
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Oceanengine\Open\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Oceanengine\Open\ApiException;
use Oceanengine\Open\Configuration;
use Oceanengine\Open\HeaderSelector;
use Oceanengine\Open\ObjectSerializer;

/**
 * ReportApi Class Doc Comment
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation call2ReportAdvertiserGetGet
     *
     * 广告主数据
     *
     * @param  string $advertiser_id advertiser_id (required)
     * @param  string $start_date start_date (required)
     * @param  string $end_date end_date (required)
     * @param  string $fields 指定需要的指标名称，可参考应答参数返回的消耗指标字段 默认值：cost、show、avg_show_cost、click、ctr、avg_click_cost、convert、convert_rate、convert_cost (optional)
     * @param  string $group_by 分组条件 默认为STAT_GROUP_BY_FIELD_STAT_TIME，支持多种分组条件，具体详见【分组组合规则】 (optional)
     * @param  string $time_granularity 时间粒度 默认值: STAT_TIME_GRANULARITY_DAILY 允许值:STAT_TIME_GRANULARITY_DAILY (按天维度),STAT_TIME_GRANULARITY_HOURLY (按小时维度) (optional)
     * @param  string $filtering 过滤字段，json格式，支持字段如下 delivery_mode:投放模式筛选。允许值:STANDARD:标准投放。ADLAB_FREE:管家&amp;省心投放 platform_version: 获取的数据平台版本允许值:V1:原版。V2:巨量引擎体验版。ALL:原版+巨量引擎体验版（默认值） (optional)
     * @param  string $order_field 排序字段，所有的统计指标均可参与排序 (optional)
     * @param  string $order_type 排序方式；默认值: DESC；允许值: ASC, DESC (optional)
     * @param  float $page 页码 默认值: 1 (optional)
     * @param  float $page_size 页面大小，即每页展示的数据量 默认值: 20 取值范围: 1-1000 (optional)
     * @param  int $x_debug_mode x_debug_mode (optional)
     *
     * @throws \Oceanengine\Open\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Oceanengine\Open\Model\InlineResponse2006
     */
    public function call2ReportAdvertiserGetGet($advertiser_id, $start_date, $end_date, $fields = null, $group_by = null, $time_granularity = null, $filtering = null, $order_field = null, $order_type = null, $page = null, $page_size = null, $x_debug_mode = null)
    {
        list($response) = $this->call2ReportAdvertiserGetGetWithHttpInfo($advertiser_id, $start_date, $end_date, $fields, $group_by, $time_granularity, $filtering, $order_field, $order_type, $page, $page_size, $x_debug_mode);
        return $response;
    }

    /**
     * Operation call2ReportAdvertiserGetGetWithHttpInfo
     *
     * 广告主数据
     *
     * @param  string $advertiser_id (required)
     * @param  string $start_date (required)
     * @param  string $end_date (required)
     * @param  string $fields 指定需要的指标名称，可参考应答参数返回的消耗指标字段 默认值：cost、show、avg_show_cost、click、ctr、avg_click_cost、convert、convert_rate、convert_cost (optional)
     * @param  string $group_by 分组条件 默认为STAT_GROUP_BY_FIELD_STAT_TIME，支持多种分组条件，具体详见【分组组合规则】 (optional)
     * @param  string $time_granularity 时间粒度 默认值: STAT_TIME_GRANULARITY_DAILY 允许值:STAT_TIME_GRANULARITY_DAILY (按天维度),STAT_TIME_GRANULARITY_HOURLY (按小时维度) (optional)
     * @param  string $filtering 过滤字段，json格式，支持字段如下 delivery_mode:投放模式筛选。允许值:STANDARD:标准投放。ADLAB_FREE:管家&amp;省心投放 platform_version: 获取的数据平台版本允许值:V1:原版。V2:巨量引擎体验版。ALL:原版+巨量引擎体验版（默认值） (optional)
     * @param  string $order_field 排序字段，所有的统计指标均可参与排序 (optional)
     * @param  string $order_type 排序方式；默认值: DESC；允许值: ASC, DESC (optional)
     * @param  float $page 页码 默认值: 1 (optional)
     * @param  float $page_size 页面大小，即每页展示的数据量 默认值: 20 取值范围: 1-1000 (optional)
     * @param  int $x_debug_mode (optional)
     *
     * @throws \Oceanengine\Open\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Oceanengine\Open\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function call2ReportAdvertiserGetGetWithHttpInfo($advertiser_id, $start_date, $end_date, $fields = null, $group_by = null, $time_granularity = null, $filtering = null, $order_field = null, $order_type = null, $page = null, $page_size = null, $x_debug_mode = null)
    {
        $request = $this->call2ReportAdvertiserGetGetRequest($advertiser_id, $start_date, $end_date, $fields, $group_by, $time_granularity, $filtering, $order_field, $order_type, $page, $page_size, $x_debug_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Oceanengine\Open\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Oceanengine\Open\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Oceanengine\Open\Model\InlineResponse2006';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Oceanengine\Open\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation call2ReportAdvertiserGetGetAsync
     *
     * 广告主数据
     *
     * @param  string $advertiser_id (required)
     * @param  string $start_date (required)
     * @param  string $end_date (required)
     * @param  string $fields 指定需要的指标名称，可参考应答参数返回的消耗指标字段 默认值：cost、show、avg_show_cost、click、ctr、avg_click_cost、convert、convert_rate、convert_cost (optional)
     * @param  string $group_by 分组条件 默认为STAT_GROUP_BY_FIELD_STAT_TIME，支持多种分组条件，具体详见【分组组合规则】 (optional)
     * @param  string $time_granularity 时间粒度 默认值: STAT_TIME_GRANULARITY_DAILY 允许值:STAT_TIME_GRANULARITY_DAILY (按天维度),STAT_TIME_GRANULARITY_HOURLY (按小时维度) (optional)
     * @param  string $filtering 过滤字段，json格式，支持字段如下 delivery_mode:投放模式筛选。允许值:STANDARD:标准投放。ADLAB_FREE:管家&amp;省心投放 platform_version: 获取的数据平台版本允许值:V1:原版。V2:巨量引擎体验版。ALL:原版+巨量引擎体验版（默认值） (optional)
     * @param  string $order_field 排序字段，所有的统计指标均可参与排序 (optional)
     * @param  string $order_type 排序方式；默认值: DESC；允许值: ASC, DESC (optional)
     * @param  float $page 页码 默认值: 1 (optional)
     * @param  float $page_size 页面大小，即每页展示的数据量 默认值: 20 取值范围: 1-1000 (optional)
     * @param  int $x_debug_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call2ReportAdvertiserGetGetAsync($advertiser_id, $start_date, $end_date, $fields = null, $group_by = null, $time_granularity = null, $filtering = null, $order_field = null, $order_type = null, $page = null, $page_size = null, $x_debug_mode = null)
    {
        return $this->call2ReportAdvertiserGetGetAsyncWithHttpInfo($advertiser_id, $start_date, $end_date, $fields, $group_by, $time_granularity, $filtering, $order_field, $order_type, $page, $page_size, $x_debug_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call2ReportAdvertiserGetGetAsyncWithHttpInfo
     *
     * 广告主数据
     *
     * @param  string $advertiser_id (required)
     * @param  string $start_date (required)
     * @param  string $end_date (required)
     * @param  string $fields 指定需要的指标名称，可参考应答参数返回的消耗指标字段 默认值：cost、show、avg_show_cost、click、ctr、avg_click_cost、convert、convert_rate、convert_cost (optional)
     * @param  string $group_by 分组条件 默认为STAT_GROUP_BY_FIELD_STAT_TIME，支持多种分组条件，具体详见【分组组合规则】 (optional)
     * @param  string $time_granularity 时间粒度 默认值: STAT_TIME_GRANULARITY_DAILY 允许值:STAT_TIME_GRANULARITY_DAILY (按天维度),STAT_TIME_GRANULARITY_HOURLY (按小时维度) (optional)
     * @param  string $filtering 过滤字段，json格式，支持字段如下 delivery_mode:投放模式筛选。允许值:STANDARD:标准投放。ADLAB_FREE:管家&amp;省心投放 platform_version: 获取的数据平台版本允许值:V1:原版。V2:巨量引擎体验版。ALL:原版+巨量引擎体验版（默认值） (optional)
     * @param  string $order_field 排序字段，所有的统计指标均可参与排序 (optional)
     * @param  string $order_type 排序方式；默认值: DESC；允许值: ASC, DESC (optional)
     * @param  float $page 页码 默认值: 1 (optional)
     * @param  float $page_size 页面大小，即每页展示的数据量 默认值: 20 取值范围: 1-1000 (optional)
     * @param  int $x_debug_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call2ReportAdvertiserGetGetAsyncWithHttpInfo($advertiser_id, $start_date, $end_date, $fields = null, $group_by = null, $time_granularity = null, $filtering = null, $order_field = null, $order_type = null, $page = null, $page_size = null, $x_debug_mode = null)
    {
        $returnType = '\Oceanengine\Open\Model\InlineResponse2006';
        $request = $this->call2ReportAdvertiserGetGetRequest($advertiser_id, $start_date, $end_date, $fields, $group_by, $time_granularity, $filtering, $order_field, $order_type, $page, $page_size, $x_debug_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call2ReportAdvertiserGetGet'
     *
     * @param  string $advertiser_id (required)
     * @param  string $start_date (required)
     * @param  string $end_date (required)
     * @param  string $fields 指定需要的指标名称，可参考应答参数返回的消耗指标字段 默认值：cost、show、avg_show_cost、click、ctr、avg_click_cost、convert、convert_rate、convert_cost (optional)
     * @param  string $group_by 分组条件 默认为STAT_GROUP_BY_FIELD_STAT_TIME，支持多种分组条件，具体详见【分组组合规则】 (optional)
     * @param  string $time_granularity 时间粒度 默认值: STAT_TIME_GRANULARITY_DAILY 允许值:STAT_TIME_GRANULARITY_DAILY (按天维度),STAT_TIME_GRANULARITY_HOURLY (按小时维度) (optional)
     * @param  string $filtering 过滤字段，json格式，支持字段如下 delivery_mode:投放模式筛选。允许值:STANDARD:标准投放。ADLAB_FREE:管家&amp;省心投放 platform_version: 获取的数据平台版本允许值:V1:原版。V2:巨量引擎体验版。ALL:原版+巨量引擎体验版（默认值） (optional)
     * @param  string $order_field 排序字段，所有的统计指标均可参与排序 (optional)
     * @param  string $order_type 排序方式；默认值: DESC；允许值: ASC, DESC (optional)
     * @param  float $page 页码 默认值: 1 (optional)
     * @param  float $page_size 页面大小，即每页展示的数据量 默认值: 20 取值范围: 1-1000 (optional)
     * @param  int $x_debug_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function call2ReportAdvertiserGetGetRequest($advertiser_id, $start_date, $end_date, $fields = null, $group_by = null, $time_granularity = null, $filtering = null, $order_field = null, $order_type = null, $page = null, $page_size = null, $x_debug_mode = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling call2ReportAdvertiserGetGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling call2ReportAdvertiserGetGet'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling call2ReportAdvertiserGetGet'
            );
        }

        $resourcePath = '/2/report/advertiser/get/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advertiser_id !== null) {
            $queryParams['advertiser_id'] = ObjectSerializer::toQueryValue($advertiser_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($group_by !== null) {
            $queryParams['group_by'] = ObjectSerializer::toQueryValue($group_by);
        }
        // query params
        if ($time_granularity !== null) {
            $queryParams['time_granularity'] = ObjectSerializer::toQueryValue($time_granularity);
        }
        // query params
        if ($filtering !== null) {
            $queryParams['filtering'] = ObjectSerializer::toQueryValue($filtering);
        }
        // query params
        if ($order_field !== null) {
            $queryParams['order_field'] = ObjectSerializer::toQueryValue($order_field);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['order_type'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // header params
        if ($x_debug_mode !== null) {
            $headerParams['X-Debug-Mode'] = ObjectSerializer::toHeaderValue($x_debug_mode);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
