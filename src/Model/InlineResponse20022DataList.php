<?php
/**
 * InlineResponse20022DataList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 巨量开放接口
 *
 * 根据项目需求完成的接口，非所有接口都有相应的代码
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Oceanengine\Open\Model;

use \ArrayAccess;
use \Oceanengine\Open\ObjectSerializer;

/**
 * InlineResponse20022DataList Class Doc Comment
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20022DataList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_22_data_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advertiser_id' => 'int',
        'transaction_type' => 'string',
        'create_time' => 'string',
        'grant' => 'float',
        'frozen' => 'float',
        'cash' => 'float',
        'amount' => 'float',
        'return_goods' => 'float',
        'transaction_seq' => 'string',
        'remitter' => 'string',
        'payee' => 'float',
        'dealbase' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'advertiser_id' => 'int64',
        'transaction_type' => null,
        'create_time' => null,
        'grant' => null,
        'frozen' => null,
        'cash' => null,
        'amount' => null,
        'return_goods' => null,
        'transaction_seq' => null,
        'remitter' => null,
        'payee' => null,
        'dealbase' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertiser_id' => 'advertiser_id',
        'transaction_type' => 'transaction_type',
        'create_time' => 'create_time',
        'grant' => 'grant',
        'frozen' => 'frozen',
        'cash' => 'cash',
        'amount' => 'amount',
        'return_goods' => 'return_goods',
        'transaction_seq' => 'transaction_seq',
        'remitter' => 'remitter',
        'payee' => 'payee',
        'dealbase' => 'dealbase'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertiser_id' => 'setAdvertiserId',
        'transaction_type' => 'setTransactionType',
        'create_time' => 'setCreateTime',
        'grant' => 'setGrant',
        'frozen' => 'setFrozen',
        'cash' => 'setCash',
        'amount' => 'setAmount',
        'return_goods' => 'setReturnGoods',
        'transaction_seq' => 'setTransactionSeq',
        'remitter' => 'setRemitter',
        'payee' => 'setPayee',
        'dealbase' => 'setDealbase'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertiser_id' => 'getAdvertiserId',
        'transaction_type' => 'getTransactionType',
        'create_time' => 'getCreateTime',
        'grant' => 'getGrant',
        'frozen' => 'getFrozen',
        'cash' => 'getCash',
        'amount' => 'getAmount',
        'return_goods' => 'getReturnGoods',
        'transaction_seq' => 'getTransactionSeq',
        'remitter' => 'getRemitter',
        'payee' => 'getPayee',
        'dealbase' => 'getDealbase'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advertiser_id'] = isset($data['advertiser_id']) ? $data['advertiser_id'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['grant'] = isset($data['grant']) ? $data['grant'] : null;
        $this->container['frozen'] = isset($data['frozen']) ? $data['frozen'] : null;
        $this->container['cash'] = isset($data['cash']) ? $data['cash'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['return_goods'] = isset($data['return_goods']) ? $data['return_goods'] : null;
        $this->container['transaction_seq'] = isset($data['transaction_seq']) ? $data['transaction_seq'] : null;
        $this->container['remitter'] = isset($data['remitter']) ? $data['remitter'] : null;
        $this->container['payee'] = isset($data['payee']) ? $data['payee'] : null;
        $this->container['dealbase'] = isset($data['dealbase']) ? $data['dealbase'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dealbase'] === null) {
            $invalidProperties[] = "'dealbase' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertiser_id
     *
     * @return int|null
     */
    public function getAdvertiserId()
    {
        return $this->container['advertiser_id'];
    }

    /**
     * Sets advertiser_id
     *
     * @param int|null $advertiser_id 广告主ID
     *
     * @return $this
     */
    public function setAdvertiserId($advertiser_id)
    {
        $this->container['advertiser_id'] = $advertiser_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type 流水类型，详见附录【流水类型】，包含转账、充值
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string|null $create_time 冻结总金额(单位元)
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets grant
     *
     * @return float|null
     */
    public function getGrant()
    {
        return $this->container['grant'];
    }

    /**
     * Sets grant
     *
     * @param float|null $grant 赠款总金额(单位元）
     *
     * @return $this
     */
    public function setGrant($grant)
    {
        $this->container['grant'] = $grant;

        return $this;
    }

    /**
     * Gets frozen
     *
     * @return float|null
     */
    public function getFrozen()
    {
        return $this->container['frozen'];
    }

    /**
     * Sets frozen
     *
     * @param float|null $frozen 冻结总金额(单位元)
     *
     * @return $this
     */
    public function setFrozen($frozen)
    {
        $this->container['frozen'] = $frozen;

        return $this;
    }

    /**
     * Gets cash
     *
     * @return float|null
     */
    public function getCash()
    {
        return $this->container['cash'];
    }

    /**
     * Sets cash
     *
     * @param float|null $cash 现金总金额(单位元)
     *
     * @return $this
     */
    public function setCash($cash)
    {
        $this->container['cash'] = $cash;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 交易总金额(单位元)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets return_goods
     *
     * @return float|null
     */
    public function getReturnGoods()
    {
        return $this->container['return_goods'];
    }

    /**
     * Sets return_goods
     *
     * @param float|null $return_goods 返货总金额(单位元)
     *
     * @return $this
     */
    public function setReturnGoods($return_goods)
    {
        $this->container['return_goods'] = $return_goods;

        return $this;
    }

    /**
     * Gets transaction_seq
     *
     * @return string|null
     */
    public function getTransactionSeq()
    {
        return $this->container['transaction_seq'];
    }

    /**
     * Sets transaction_seq
     *
     * @param string|null $transaction_seq 付款方，即广告主id。
     *
     * @return $this
     */
    public function setTransactionSeq($transaction_seq)
    {
        $this->container['transaction_seq'] = $transaction_seq;

        return $this;
    }

    /**
     * Gets remitter
     *
     * @return string|null
     */
    public function getRemitter()
    {
        return $this->container['remitter'];
    }

    /**
     * Sets remitter
     *
     * @param string|null $remitter 付款方，即广告主id。
     *
     * @return $this
     */
    public function setRemitter($remitter)
    {
        $this->container['remitter'] = $remitter;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return float|null
     */
    public function getPayee()
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param float|null $payee 收款方，即广告主id。
     *
     * @return $this
     */
    public function setPayee($payee)
    {
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets dealbase
     *
     * @return float
     */
    public function getDealbase()
    {
        return $this->container['dealbase'];
    }

    /**
     * Sets dealbase
     *
     * @param float $dealbase 返点
     *
     * @return $this
     */
    public function setDealbase($dealbase)
    {
        $this->container['dealbase'] = $dealbase;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


