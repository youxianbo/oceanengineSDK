<?php
/**
 * InlineResponse20027DataList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 巨量开放接口
 *
 * 根据项目需求完成的接口，非所有接口都有相应的代码
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Oceanengine\Open\Model;

use \ArrayAccess;
use \Oceanengine\Open\ObjectSerializer;

/**
 * InlineResponse20027DataList Class Doc Comment
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20027DataList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_27_data_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'e_douyin_name' => 'string',
        'e_douyin_id' => 'string',
        'advertiser_id' => 'string',
        'advertiser_name' => 'string',
        'advertiser_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'e_douyin_name' => null,
        'e_douyin_id' => null,
        'advertiser_id' => null,
        'advertiser_name' => null,
        'advertiser_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'e_douyin_name' => 'e_douyin_name',
        'e_douyin_id' => 'e_douyin_id',
        'advertiser_id' => 'advertiser_id',
        'advertiser_name' => 'advertiser_name',
        'advertiser_type' => 'advertiser_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'e_douyin_name' => 'setEDouyinName',
        'e_douyin_id' => 'setEDouyinId',
        'advertiser_id' => 'setAdvertiserId',
        'advertiser_name' => 'setAdvertiserName',
        'advertiser_type' => 'setAdvertiserType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'e_douyin_name' => 'getEDouyinName',
        'e_douyin_id' => 'getEDouyinId',
        'advertiser_id' => 'getAdvertiserId',
        'advertiser_name' => 'getAdvertiserName',
        'advertiser_type' => 'getAdvertiserType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['e_douyin_name'] = isset($data['e_douyin_name']) ? $data['e_douyin_name'] : null;
        $this->container['e_douyin_id'] = isset($data['e_douyin_id']) ? $data['e_douyin_id'] : null;
        $this->container['advertiser_id'] = isset($data['advertiser_id']) ? $data['advertiser_id'] : null;
        $this->container['advertiser_name'] = isset($data['advertiser_name']) ? $data['advertiser_name'] : null;
        $this->container['advertiser_type'] = isset($data['advertiser_type']) ? $data['advertiser_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['e_douyin_name'] === null) {
            $invalidProperties[] = "'e_douyin_name' can't be null";
        }
        if ($this->container['e_douyin_id'] === null) {
            $invalidProperties[] = "'e_douyin_id' can't be null";
        }
        if ($this->container['advertiser_id'] === null) {
            $invalidProperties[] = "'advertiser_id' can't be null";
        }
        if ($this->container['advertiser_name'] === null) {
            $invalidProperties[] = "'advertiser_name' can't be null";
        }
        if ($this->container['advertiser_type'] === null) {
            $invalidProperties[] = "'advertiser_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets e_douyin_name
     *
     * @return string
     */
    public function getEDouyinName()
    {
        return $this->container['e_douyin_name'];
    }

    /**
     * Sets e_douyin_name
     *
     * @param string $e_douyin_name 企业号名称
     *
     * @return $this
     */
    public function setEDouyinName($e_douyin_name)
    {
        $this->container['e_douyin_name'] = $e_douyin_name;

        return $this;
    }

    /**
     * Gets e_douyin_id
     *
     * @return string
     */
    public function getEDouyinId()
    {
        return $this->container['e_douyin_id'];
    }

    /**
     * Sets e_douyin_id
     *
     * @param string $e_douyin_id 企业号id(一个对象只会返回企业号和广告主其中一种)
     *
     * @return $this
     */
    public function setEDouyinId($e_douyin_id)
    {
        $this->container['e_douyin_id'] = $e_douyin_id;

        return $this;
    }

    /**
     * Gets advertiser_id
     *
     * @return string
     */
    public function getAdvertiserId()
    {
        return $this->container['advertiser_id'];
    }

    /**
     * Sets advertiser_id
     *
     * @param string $advertiser_id 广告主id
     *
     * @return $this
     */
    public function setAdvertiserId($advertiser_id)
    {
        $this->container['advertiser_id'] = $advertiser_id;

        return $this;
    }

    /**
     * Gets advertiser_name
     *
     * @return string
     */
    public function getAdvertiserName()
    {
        return $this->container['advertiser_name'];
    }

    /**
     * Sets advertiser_name
     *
     * @param string $advertiser_name 广告主名称
     *
     * @return $this
     */
    public function setAdvertiserName($advertiser_name)
    {
        $this->container['advertiser_name'] = $advertiser_name;

        return $this;
    }

    /**
     * Gets advertiser_type
     *
     * @return string
     */
    public function getAdvertiserType()
    {
        return $this->container['advertiser_type'];
    }

    /**
     * Sets advertiser_type
     *
     * @param string $advertiser_type 广告主类型枚举值：DOU+ DOU+类广告主账号、NORMAL普通广告主帐号
     *
     * @return $this
     */
    public function setAdvertiserType($advertiser_type)
    {
        $this->container['advertiser_type'] = $advertiser_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


