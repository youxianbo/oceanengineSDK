<?php
/**
 * InlineResponse20015DataSiteRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 巨量开放接口
 *
 * 根据项目需求完成的接口，非所有接口都有相应的代码
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Oceanengine\Open\Model;

use \ArrayAccess;
use \Oceanengine\Open\ObjectSerializer;

/**
 * InlineResponse20015DataSiteRecord Class Doc Comment
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20015DataSiteRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_15_data_site_record';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avg_load_time' => '\Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]',
        'avg_exposure_rate' => '\Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]',
        'pv' => '\Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]',
        'uv' => '\Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]',
        'cvr' => '\Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]',
        'avg_visit_time' => '\Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'avg_load_time' => null,
        'avg_exposure_rate' => null,
        'pv' => null,
        'uv' => null,
        'cvr' => null,
        'avg_visit_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avg_load_time' => 'AVG_LOAD_TIME',
        'avg_exposure_rate' => 'AVG_EXPOSURE_RATE',
        'pv' => 'PV',
        'uv' => 'UV',
        'cvr' => 'CVR',
        'avg_visit_time' => 'AVG_VISIT_TIME'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avg_load_time' => 'setAvgLoadTime',
        'avg_exposure_rate' => 'setAvgExposureRate',
        'pv' => 'setPv',
        'uv' => 'setUv',
        'cvr' => 'setCvr',
        'avg_visit_time' => 'setAvgVisitTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avg_load_time' => 'getAvgLoadTime',
        'avg_exposure_rate' => 'getAvgExposureRate',
        'pv' => 'getPv',
        'uv' => 'getUv',
        'cvr' => 'getCvr',
        'avg_visit_time' => 'getAvgVisitTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['avg_load_time'] = isset($data['avg_load_time']) ? $data['avg_load_time'] : null;
        $this->container['avg_exposure_rate'] = isset($data['avg_exposure_rate']) ? $data['avg_exposure_rate'] : null;
        $this->container['pv'] = isset($data['pv']) ? $data['pv'] : null;
        $this->container['uv'] = isset($data['uv']) ? $data['uv'] : null;
        $this->container['cvr'] = isset($data['cvr']) ? $data['cvr'] : null;
        $this->container['avg_visit_time'] = isset($data['avg_visit_time']) ? $data['avg_visit_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['avg_load_time'] === null) {
            $invalidProperties[] = "'avg_load_time' can't be null";
        }
        if ($this->container['avg_exposure_rate'] === null) {
            $invalidProperties[] = "'avg_exposure_rate' can't be null";
        }
        if ($this->container['pv'] === null) {
            $invalidProperties[] = "'pv' can't be null";
        }
        if ($this->container['uv'] === null) {
            $invalidProperties[] = "'uv' can't be null";
        }
        if ($this->container['cvr'] === null) {
            $invalidProperties[] = "'cvr' can't be null";
        }
        if ($this->container['avg_visit_time'] === null) {
            $invalidProperties[] = "'avg_visit_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avg_load_time
     *
     * @return \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]
     */
    public function getAvgLoadTime()
    {
        return $this->container['avg_load_time'];
    }

    /**
     * Sets avg_load_time
     *
     * @param \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[] $avg_load_time avg_load_time
     *
     * @return $this
     */
    public function setAvgLoadTime($avg_load_time)
    {
        $this->container['avg_load_time'] = $avg_load_time;

        return $this;
    }

    /**
     * Gets avg_exposure_rate
     *
     * @return \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]
     */
    public function getAvgExposureRate()
    {
        return $this->container['avg_exposure_rate'];
    }

    /**
     * Sets avg_exposure_rate
     *
     * @param \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[] $avg_exposure_rate avg_exposure_rate
     *
     * @return $this
     */
    public function setAvgExposureRate($avg_exposure_rate)
    {
        $this->container['avg_exposure_rate'] = $avg_exposure_rate;

        return $this;
    }

    /**
     * Gets pv
     *
     * @return \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]
     */
    public function getPv()
    {
        return $this->container['pv'];
    }

    /**
     * Sets pv
     *
     * @param \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[] $pv pv
     *
     * @return $this
     */
    public function setPv($pv)
    {
        $this->container['pv'] = $pv;

        return $this;
    }

    /**
     * Gets uv
     *
     * @return \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]
     */
    public function getUv()
    {
        return $this->container['uv'];
    }

    /**
     * Sets uv
     *
     * @param \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[] $uv uv
     *
     * @return $this
     */
    public function setUv($uv)
    {
        $this->container['uv'] = $uv;

        return $this;
    }

    /**
     * Gets cvr
     *
     * @return \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]
     */
    public function getCvr()
    {
        return $this->container['cvr'];
    }

    /**
     * Sets cvr
     *
     * @param \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[] $cvr cvr
     *
     * @return $this
     */
    public function setCvr($cvr)
    {
        $this->container['cvr'] = $cvr;

        return $this;
    }

    /**
     * Gets avg_visit_time
     *
     * @return \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[]
     */
    public function getAvgVisitTime()
    {
        return $this->container['avg_visit_time'];
    }

    /**
     * Sets avg_visit_time
     *
     * @param \Oceanengine\Open\Model\InlineResponse20015DataSiteRecordAVGLOADTIME[] $avg_visit_time avg_visit_time
     *
     * @return $this
     */
    public function setAvgVisitTime($avg_visit_time)
    {
        $this->container['avg_visit_time'] = $avg_visit_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


