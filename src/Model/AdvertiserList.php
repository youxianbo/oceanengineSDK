<?php
/**
 * AdvertiserList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 巨量开放接口
 *
 * 根据项目需求完成的接口，非所有接口都有相应的代码
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Oceanengine\Open\Model;

use \ArrayAccess;
use \Oceanengine\Open\ObjectSerializer;

/**
 * AdvertiserList Class Doc Comment
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvertiserList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdvertiserList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advertiser_id' => 'float',
        'advertiser_name' => 'string',
        'advertiser_role' => 'float',
        'is_valid' => 'bool',
        'account_role' => 'string',
        'company_list' => '\Oceanengine\Open\Model\AdvertiserListCompanyList[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'advertiser_id' => null,
        'advertiser_name' => null,
        'advertiser_role' => null,
        'is_valid' => null,
        'account_role' => null,
        'company_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertiser_id' => 'advertiser_id',
        'advertiser_name' => 'advertiser_name',
        'advertiser_role' => 'advertiser_role',
        'is_valid' => 'is_valid',
        'account_role' => 'account_role',
        'company_list' => 'company_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertiser_id' => 'setAdvertiserId',
        'advertiser_name' => 'setAdvertiserName',
        'advertiser_role' => 'setAdvertiserRole',
        'is_valid' => 'setIsValid',
        'account_role' => 'setAccountRole',
        'company_list' => 'setCompanyList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertiser_id' => 'getAdvertiserId',
        'advertiser_name' => 'getAdvertiserName',
        'advertiser_role' => 'getAdvertiserRole',
        'is_valid' => 'getIsValid',
        'account_role' => 'getAccountRole',
        'company_list' => 'getCompanyList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advertiser_id'] = isset($data['advertiser_id']) ? $data['advertiser_id'] : null;
        $this->container['advertiser_name'] = isset($data['advertiser_name']) ? $data['advertiser_name'] : null;
        $this->container['advertiser_role'] = isset($data['advertiser_role']) ? $data['advertiser_role'] : null;
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['account_role'] = isset($data['account_role']) ? $data['account_role'] : null;
        $this->container['company_list'] = isset($data['company_list']) ? $data['company_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['advertiser_name'] === null) {
            $invalidProperties[] = "'advertiser_name' can't be null";
        }
        if ($this->container['advertiser_role'] === null) {
            $invalidProperties[] = "'advertiser_role' can't be null";
        }
        if ($this->container['is_valid'] === null) {
            $invalidProperties[] = "'is_valid' can't be null";
        }
        if ($this->container['account_role'] === null) {
            $invalidProperties[] = "'account_role' can't be null";
        }
        if ($this->container['company_list'] === null) {
            $invalidProperties[] = "'company_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertiser_id
     *
     * @return float|null
     */
    public function getAdvertiserId()
    {
        return $this->container['advertiser_id'];
    }

    /**
     * Sets advertiser_id
     *
     * @param float|null $advertiser_id advertiser_id
     *
     * @return $this
     */
    public function setAdvertiserId($advertiser_id)
    {
        $this->container['advertiser_id'] = $advertiser_id;

        return $this;
    }

    /**
     * Gets advertiser_name
     *
     * @return string
     */
    public function getAdvertiserName()
    {
        return $this->container['advertiser_name'];
    }

    /**
     * Sets advertiser_name
     *
     * @param string $advertiser_name advertiser_name
     *
     * @return $this
     */
    public function setAdvertiserName($advertiser_name)
    {
        $this->container['advertiser_name'] = $advertiser_name;

        return $this;
    }

    /**
     * Gets advertiser_role
     *
     * @return float
     */
    public function getAdvertiserRole()
    {
        return $this->container['advertiser_role'];
    }

    /**
     * Sets advertiser_role
     *
     * @param float $advertiser_role 旧版账号角色，1-普通广告主，2-纵横组织账户，3-一级代理商，4-二级代理商，6-星图账号
     *
     * @return $this
     */
    public function setAdvertiserRole($advertiser_role)
    {
        $this->container['advertiser_role'] = $advertiser_role;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool $is_valid 授权有效性，允许值：true/false；false表示对应的user在客户中心/一站式平台代理商平台变更了对此账号的权限,需要到对应平台进行调整过来；
     *
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets account_role
     *
     * @return string
     */
    public function getAccountRole()
    {
        return $this->container['account_role'];
    }

    /**
     * Sets account_role
     *
     * @param string $account_role 新版账号角色，见【枚举值-账户角色】
     *
     * @return $this
     */
    public function setAccountRole($account_role)
    {
        $this->container['account_role'] = $account_role;

        return $this;
    }

    /**
     * Gets company_list
     *
     * @return \Oceanengine\Open\Model\AdvertiserListCompanyList[]
     */
    public function getCompanyList()
    {
        return $this->container['company_list'];
    }

    /**
     * Sets company_list
     *
     * @param \Oceanengine\Open\Model\AdvertiserListCompanyList[] $company_list 代理商账户下勾选账户，但授权时选择的是代理商类型账户时，该字段才有意义 company_list为空时，代表当前代理商账户下所有adv均可访问；不为空时，代表仅能访问该部分客户id下的adv
     *
     * @return $this
     */
    public function setCompanyList($company_list)
    {
        $this->container['company_list'] = $company_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


