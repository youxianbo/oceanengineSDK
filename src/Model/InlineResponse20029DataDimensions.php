<?php
/**
 * InlineResponse20029DataDimensions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 巨量开放接口
 *
 * 根据项目需求完成的接口，非所有接口都有相应的代码
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Oceanengine\Open\Model;

use \ArrayAccess;
use \Oceanengine\Open\ObjectSerializer;

/**
 * InlineResponse20029DataDimensions Class Doc Comment
 *
 * @category Class
 * @package  Oceanengine\Open
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20029DataDimensions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_29_data_dimensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'exclusion_dims' => 'string[]',
        'field' => 'string',
        'filter_able' => 'bool',
        'name' => 'string',
        'sort_able' => 'bool',
        'filter_config' => '\Oceanengine\Open\Model\InlineResponse20029DataFilterConfig',
        'exclusion_metrics' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'description' => null,
        'exclusion_dims' => null,
        'field' => null,
        'filter_able' => null,
        'name' => null,
        'sort_able' => null,
        'filter_config' => null,
        'exclusion_metrics' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'exclusion_dims' => 'exclusion_dims',
        'field' => 'field',
        'filter_able' => 'filter_able',
        'name' => 'name',
        'sort_able' => 'sort_able',
        'filter_config' => 'filter_config',
        'exclusion_metrics' => 'exclusion_metrics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'exclusion_dims' => 'setExclusionDims',
        'field' => 'setField',
        'filter_able' => 'setFilterAble',
        'name' => 'setName',
        'sort_able' => 'setSortAble',
        'filter_config' => 'setFilterConfig',
        'exclusion_metrics' => 'setExclusionMetrics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'exclusion_dims' => 'getExclusionDims',
        'field' => 'getField',
        'filter_able' => 'getFilterAble',
        'name' => 'getName',
        'sort_able' => 'getSortAble',
        'filter_config' => 'getFilterConfig',
        'exclusion_metrics' => 'getExclusionMetrics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['exclusion_dims'] = isset($data['exclusion_dims']) ? $data['exclusion_dims'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['filter_able'] = isset($data['filter_able']) ? $data['filter_able'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sort_able'] = isset($data['sort_able']) ? $data['sort_able'] : null;
        $this->container['filter_config'] = isset($data['filter_config']) ? $data['filter_config'] : null;
        $this->container['exclusion_metrics'] = isset($data['exclusion_metrics']) ? $data['exclusion_metrics'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['exclusion_dims'] === null) {
            $invalidProperties[] = "'exclusion_dims' can't be null";
        }
        if ($this->container['field'] === null) {
            $invalidProperties[] = "'field' can't be null";
        }
        if ($this->container['filter_able'] === null) {
            $invalidProperties[] = "'filter_able' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['sort_able'] === null) {
            $invalidProperties[] = "'sort_able' can't be null";
        }
        if ($this->container['filter_config'] === null) {
            $invalidProperties[] = "'filter_config' can't be null";
        }
        if ($this->container['exclusion_metrics'] === null) {
            $invalidProperties[] = "'exclusion_metrics' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets exclusion_dims
     *
     * @return string[]
     */
    public function getExclusionDims()
    {
        return $this->container['exclusion_dims'];
    }

    /**
     * Sets exclusion_dims
     *
     * @param string[] $exclusion_dims exclusion_dims
     *
     * @return $this
     */
    public function setExclusionDims($exclusion_dims)
    {
        $this->container['exclusion_dims'] = $exclusion_dims;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets filter_able
     *
     * @return bool
     */
    public function getFilterAble()
    {
        return $this->container['filter_able'];
    }

    /**
     * Sets filter_able
     *
     * @param bool $filter_able filter_able
     *
     * @return $this
     */
    public function setFilterAble($filter_able)
    {
        $this->container['filter_able'] = $filter_able;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sort_able
     *
     * @return bool
     */
    public function getSortAble()
    {
        return $this->container['sort_able'];
    }

    /**
     * Sets sort_able
     *
     * @param bool $sort_able sort_able
     *
     * @return $this
     */
    public function setSortAble($sort_able)
    {
        $this->container['sort_able'] = $sort_able;

        return $this;
    }

    /**
     * Gets filter_config
     *
     * @return \Oceanengine\Open\Model\InlineResponse20029DataFilterConfig
     */
    public function getFilterConfig()
    {
        return $this->container['filter_config'];
    }

    /**
     * Sets filter_config
     *
     * @param \Oceanengine\Open\Model\InlineResponse20029DataFilterConfig $filter_config filter_config
     *
     * @return $this
     */
    public function setFilterConfig($filter_config)
    {
        $this->container['filter_config'] = $filter_config;

        return $this;
    }

    /**
     * Gets exclusion_metrics
     *
     * @return string[]
     */
    public function getExclusionMetrics()
    {
        return $this->container['exclusion_metrics'];
    }

    /**
     * Sets exclusion_metrics
     *
     * @param string[] $exclusion_metrics exclusion_metrics
     *
     * @return $this
     */
    public function setExclusionMetrics($exclusion_metrics)
    {
        $this->container['exclusion_metrics'] = $exclusion_metrics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


